
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 22 07:55:57 CET 2016
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 22 07:55:57 CET 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\040\007\000\002\004" +
    "\006\000\002\013\004\000\002\013\002\000\002\043\003" +
    "\000\002\043\004\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\015\004\000\002\007\006\000\002\007\007\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\021\005" +
    "\000\002\022\005\000\002\022\007\000\002\051\003\000" +
    "\002\051\005\000\002\017\010\000\002\016\012\000\002" +
    "\032\005\000\002\032\002\000\002\031\005\000\002\031" +
    "\007\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\042\004\000\002\042\004\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\003\005\000\002\033\003\000\002\033" +
    "\006\000\002\033\005\000\002\025\005\000\002\025\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\037\003\000\002\037\003\000" +
    "\002\027\003\000\002\027\004\000\002\027\005\000\002" +
    "\027\004\000\002\027\006\000\002\027\005\000\002\045" +
    "\005\000\002\045\002\000\002\026\003\000\002\026\005" +
    "\000\002\041\004\000\002\024\006\000\002\014\005\000" +
    "\002\014\002\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\020\004\000\002\047\006\000\002\047" +
    "\007\000\002\050\012\000\002\050\005\000\002\002\003" +
    "\000\002\002\003\000\002\010\007\000\002\023\004\000" +
    "\002\023\002\000\002\052\006\000\002\030\012\000\002" +
    "\005\007\000\002\006\006\000\002\006\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\004\046\005\001\002\000\004\002\274\001" +
    "\002\000\004\062\006\001\002\000\004\053\007\001\002" +
    "\000\016\010\ufffd\015\ufffd\026\ufffd\045\ufffd\057\ufffd\060" +
    "\ufffd\001\002\000\016\010\022\015\026\026\021\045\015" +
    "\057\020\060\016\001\002\000\004\020\012\001\002\000" +
    "\004\002\000\001\002\000\016\010\ufffa\015\ufffa\026\ufffa" +
    "\045\ufffa\057\ufffa\060\ufffa\001\002\000\016\010\ufff9\015" +
    "\ufff9\026\ufff9\045\ufff9\057\ufff9\060\ufff9\001\002\000\004" +
    "\062\267\001\002\000\004\062\224\001\002\000\016\010" +
    "\ufffe\015\ufffe\026\ufffe\045\ufffe\057\ufffe\060\ufffe\001\002" +
    "\000\004\062\235\001\002\000\004\062\206\001\002\000" +
    "\020\010\uffb7\011\057\025\047\031\052\053\uffb7\061\044" +
    "\062\060\001\002\000\016\010\ufff8\015\ufff8\026\ufff8\045" +
    "\ufff8\057\ufff8\060\ufff8\001\002\000\016\010\ufff6\015\ufff6" +
    "\026\ufff6\045\ufff6\057\ufff6\060\ufff6\001\002\000\016\010" +
    "\ufff7\015\ufff7\026\ufff7\045\ufff7\057\ufff7\060\ufff7\001\002" +
    "\000\004\062\027\001\002\000\004\024\040\001\002\000" +
    "\022\010\ufff5\015\ufff5\026\ufff5\045\ufff5\053\ufff5\057\ufff5" +
    "\060\ufff5\062\031\001\002\000\004\024\032\001\002\000" +
    "\010\063\035\064\036\065\034\001\002\000\004\053\037" +
    "\001\002\000\060\004\ufff0\005\ufff0\013\ufff0\014\ufff0\016" +
    "\ufff0\017\ufff0\021\ufff0\024\ufff0\027\ufff0\030\ufff0\035\ufff0" +
    "\036\ufff0\037\ufff0\040\ufff0\041\ufff0\043\ufff0\044\ufff0\051" +
    "\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\001\002" +
    "\000\060\004\ufff2\005\ufff2\013\ufff2\014\ufff2\016\ufff2\017" +
    "\ufff2\021\ufff2\024\ufff2\027\ufff2\030\ufff2\035\ufff2\036\ufff2" +
    "\037\ufff2\040\ufff2\041\ufff2\043\ufff2\044\ufff2\051\ufff2\052" +
    "\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\001\002\000\060" +
    "\004\ufff1\005\ufff1\013\ufff1\014\ufff1\016\ufff1\017\ufff1\021" +
    "\ufff1\024\ufff1\027\ufff1\030\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\041\ufff1\043\ufff1\044\ufff1\051\ufff1\052\ufff1\053" +
    "\ufff1\054\ufff1\055\ufff1\056\ufff1\001\002\000\022\010\ufff3" +
    "\015\ufff3\026\ufff3\045\ufff3\053\ufff3\057\ufff3\060\ufff3\062" +
    "\ufff3\001\002\000\010\063\035\064\036\065\034\001\002" +
    "\000\004\053\042\001\002\000\022\010\ufff4\015\ufff4\026" +
    "\ufff4\045\ufff4\053\ufff4\057\ufff4\060\ufff4\062\ufff4\001\002" +
    "\000\024\010\uffdf\011\uffdf\022\uffdf\023\uffdf\025\uffdf\031" +
    "\uffdf\053\uffdf\061\uffdf\062\uffdf\001\002\000\016\034\101" +
    "\042\106\062\105\063\035\064\036\065\034\001\002\000" +
    "\004\007\201\001\002\000\024\010\uffdd\011\uffdd\022\uffdd" +
    "\023\uffdd\025\uffdd\031\uffdd\053\uffdd\061\uffdd\062\uffdd\001" +
    "\002\000\004\062\172\001\002\000\022\010\uffb7\011\057" +
    "\023\171\025\047\031\052\053\uffb7\061\044\062\060\001" +
    "\002\000\004\053\170\001\002\000\016\034\101\042\106" +
    "\062\105\063\035\064\036\065\034\001\002\000\024\010" +
    "\uffdc\011\uffdc\022\uffdc\023\uffdc\025\uffdc\031\uffdc\053\uffdc" +
    "\061\uffdc\062\uffdc\001\002\000\022\010\ufffc\011\ufffc\023" +
    "\ufffc\025\ufffc\031\ufffc\053\ufffc\061\ufffc\062\ufffc\001\002" +
    "\000\004\053\161\001\002\000\024\010\uffde\011\uffde\022" +
    "\uffde\023\uffde\025\uffde\031\uffde\053\uffde\061\uffde\062\uffde" +
    "\001\002\000\016\034\101\042\106\062\105\063\035\064" +
    "\036\065\034\001\002\000\014\007\uffd9\020\077\033\075" +
    "\034\074\053\uffbd\001\002\000\024\010\uffdb\011\uffdb\022" +
    "\uffdb\023\uffdb\025\uffdb\031\uffdb\053\uffdb\061\uffdb\062\uffdb" +
    "\001\002\000\006\010\063\053\064\001\002\000\020\010" +
    "\uffb7\011\057\025\047\031\052\053\uffb7\061\044\062\060" +
    "\001\002\000\010\015\026\057\020\060\016\001\002\000" +
    "\006\010\uffb6\053\uffb6\001\002\000\006\010\uffb8\053\uffb8" +
    "\001\002\000\006\010\uffb4\053\uffb4\001\002\000\006\010" +
    "\uffb5\053\uffb5\001\002\000\022\010\uffb7\011\057\023\073" +
    "\025\047\031\052\053\uffb7\061\044\062\060\001\002\000" +
    "\022\010\ufffb\011\ufffb\023\ufffb\025\ufffb\031\ufffb\053\ufffb" +
    "\061\ufffb\062\ufffb\001\002\000\024\010\uffb9\011\uffb9\022" +
    "\uffb9\023\uffb9\025\uffb9\031\uffb9\053\uffb9\061\uffb9\062\uffb9" +
    "\001\002\000\016\034\101\042\106\062\105\063\035\064" +
    "\036\065\034\001\002\000\016\034\101\042\106\062\105" +
    "\063\035\064\036\065\034\001\002\000\004\053\uffba\001" +
    "\002\000\004\062\100\001\002\000\004\007\uffd7\001\002" +
    "\000\016\034\101\042\106\062\105\063\035\064\036\065" +
    "\034\001\002\000\056\004\uffc4\005\uffc4\013\uffc4\014\uffc4" +
    "\016\uffc4\017\uffc4\024\uffc4\027\uffc4\030\uffc4\035\uffc4\036" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\043\uffc4\044\uffc4\051\uffc4" +
    "\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\001\002\000" +
    "\036\004\131\005\117\016\130\024\132\027\115\030\122" +
    "\035\133\036\120\037\116\040\134\041\135\044\121\051" +
    "\140\054\124\001\002\000\056\004\uffd5\005\uffd5\013\uffd5" +
    "\014\uffd5\016\uffd5\017\uffd5\024\uffd5\027\uffd5\030\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\043\uffd5\044\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\001" +
    "\002\000\064\004\uffbd\005\uffbd\013\uffbd\014\uffbd\016\uffbd" +
    "\017\uffbd\020\112\024\uffbd\027\uffbd\030\uffbd\033\111\034" +
    "\074\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\043\uffbd" +
    "\044\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\001\002\000\016\034\101\042\106\062\105\063\035" +
    "\064\036\065\034\001\002\000\056\004\uffc3\005\uffc3\013" +
    "\uffc3\014\uffc3\016\uffc3\017\uffc3\024\uffc3\027\uffc3\030\uffc3" +
    "\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\043\uffc3\044" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3" +
    "\001\002\000\056\004\uffc1\005\uffc1\013\uffc1\014\uffc1\016" +
    "\uffc1\017\uffc1\024\uffc1\027\uffc1\030\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\041\uffc1\043\uffc1\044\uffc1\051\uffc1\052" +
    "\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\001\002\000\016" +
    "\034\101\042\106\062\105\063\035\064\036\065\034\001" +
    "\002\000\004\062\113\001\002\000\056\004\uffbf\005\uffbf" +
    "\013\uffbf\014\uffbf\016\uffbf\017\uffbf\024\uffbf\027\uffbf\030" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\043\uffbf" +
    "\044\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056" +
    "\uffbf\001\002\000\036\004\131\005\117\016\130\024\132" +
    "\027\115\030\122\035\133\036\120\037\116\040\134\041" +
    "\135\044\121\051\136\054\124\001\002\000\016\034\uffce" +
    "\042\uffce\062\uffce\063\uffce\064\uffce\065\uffce\001\002\000" +
    "\016\034\uffc7\042\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7" +
    "\001\002\000\016\034\uffc5\042\uffc5\062\uffc5\063\uffc5\064" +
    "\uffc5\065\uffc5\001\002\000\016\034\uffd1\042\uffd1\062\uffd1" +
    "\063\uffd1\064\uffd1\065\uffd1\001\002\000\016\034\uffc6\042" +
    "\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\001\002\000\016" +
    "\034\uffd0\042\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\001" +
    "\002\000\016\034\101\042\106\062\105\063\035\064\036" +
    "\065\034\001\002\000\016\034\uffca\042\uffca\062\uffca\063" +
    "\uffca\064\uffca\065\uffca\001\002\000\016\034\uffd2\042\uffd2" +
    "\062\uffd2\063\uffd2\064\uffd2\065\uffd2\001\002\000\016\034" +
    "\uffd3\042\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\001\002" +
    "\000\016\034\uffd4\042\uffd4\062\uffd4\063\uffd4\064\uffd4\065" +
    "\uffd4\001\002\000\016\034\uffc8\042\uffc8\062\uffc8\063\uffc8" +
    "\064\uffc8\065\uffc8\001\002\000\016\034\uffcb\042\uffcb\062" +
    "\uffcb\063\uffcb\064\uffcb\065\uffcb\001\002\000\016\034\uffcd" +
    "\042\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\001\002\000" +
    "\016\034\uffcf\042\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf" +
    "\001\002\000\016\034\uffc9\042\uffc9\062\uffc9\063\uffc9\064" +
    "\uffc9\065\uffc9\001\002\000\016\034\uffcc\042\uffcc\062\uffcc" +
    "\063\uffcc\064\uffcc\065\uffcc\001\002\000\056\004\uffc0\005" +
    "\uffc0\013\uffc0\014\uffc0\016\uffc0\017\uffc0\024\uffc0\027\uffc0" +
    "\030\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\043" +
    "\uffc0\044\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0" +
    "\056\uffc0\001\002\000\056\004\131\005\117\013\uffd6\014" +
    "\uffd6\016\130\017\uffd6\024\132\027\115\030\122\035\133" +
    "\036\120\037\116\040\134\041\135\043\uffd6\044\121\051" +
    "\uffd6\052\uffd6\053\uffd6\054\124\055\uffd6\056\uffd6\001\002" +
    "\000\004\007\uffd8\001\002\000\036\004\131\005\117\016" +
    "\130\024\132\027\115\030\122\035\133\036\120\037\116" +
    "\040\134\041\135\044\121\052\142\054\124\001\002\000" +
    "\056\004\uffc2\005\uffc2\013\uffc2\014\uffc2\016\uffc2\017\uffc2" +
    "\024\uffc2\027\uffc2\030\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\043\uffc2\044\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\054\uffc2\055\uffc2\056\uffc2\001\002\000\040\004\131\005" +
    "\117\014\146\016\130\024\132\027\115\030\122\035\133" +
    "\036\120\037\116\040\134\041\135\044\121\052\uffbc\054" +
    "\124\001\002\000\004\052\145\001\002\000\056\004\uffbe" +
    "\005\uffbe\013\uffbe\014\uffbe\016\uffbe\017\uffbe\024\uffbe\027" +
    "\uffbe\030\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe" +
    "\043\uffbe\044\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\001\002\000\016\034\101\042\106\062\105" +
    "\063\035\064\036\065\034\001\002\000\004\052\uffbb\001" +
    "\002\000\036\004\131\005\117\016\130\024\132\027\115" +
    "\030\122\035\133\036\120\037\116\040\134\041\135\043" +
    "\151\044\121\054\124\001\002\000\016\034\101\042\106" +
    "\062\105\063\035\064\036\065\034\001\002\000\004\023" +
    "\160\001\002\000\036\004\131\005\117\013\154\016\130" +
    "\024\132\027\115\030\122\035\133\036\120\037\116\040" +
    "\134\041\135\044\121\054\124\001\002\000\020\010\uffb7" +
    "\011\057\025\047\031\052\053\uffb7\061\044\062\060\001" +
    "\002\000\004\053\156\001\002\000\020\023\uffa6\034\101" +
    "\042\106\062\105\063\035\064\036\065\034\001\002\000" +
    "\004\023\uffa5\001\002\000\024\010\uffa7\011\uffa7\022\uffa7" +
    "\023\uffa7\025\uffa7\031\uffa7\053\uffa7\061\uffa7\062\uffa7\001" +
    "\002\000\024\010\uffe1\011\uffe1\022\uffe1\023\uffe1\025\uffe1" +
    "\031\uffe1\053\uffe1\061\uffe1\062\uffe1\001\002\000\036\004" +
    "\131\005\117\016\130\024\132\027\115\030\122\035\133" +
    "\036\120\037\116\040\134\041\135\044\121\054\124\055" +
    "\163\001\002\000\020\010\uffb7\011\057\025\047\031\052" +
    "\053\uffb7\061\044\062\060\001\002\000\024\010\uffaa\011" +
    "\uffaa\022\165\023\uffaa\025\uffaa\031\uffaa\053\uffaa\061\uffaa" +
    "\062\uffaa\001\002\000\020\010\uffb7\011\057\025\047\031" +
    "\052\053\uffb7\061\044\062\060\001\002\000\024\010\uffac" +
    "\011\uffac\022\uffac\023\uffac\025\uffac\031\uffac\053\uffac\061" +
    "\uffac\062\uffac\001\002\000\024\010\uffab\011\uffab\022\uffab" +
    "\023\uffab\025\uffab\031\uffab\053\uffab\061\uffab\062\uffab\001" +
    "\002\000\024\010\uffe0\011\uffe0\022\uffe0\023\uffe0\025\uffe0" +
    "\031\uffe0\053\uffe0\061\uffe0\062\uffe0\001\002\000\006\020" +
    "\uffff\053\uffff\001\002\000\004\007\173\001\002\000\016" +
    "\034\101\042\106\062\105\063\035\064\036\065\034\001" +
    "\002\000\036\004\131\005\117\016\130\024\132\027\115" +
    "\030\122\035\133\036\120\037\116\040\134\041\135\044" +
    "\121\054\124\056\175\001\002\000\016\034\101\042\106" +
    "\062\105\063\035\064\036\065\034\001\002\000\036\004" +
    "\131\005\117\016\130\017\177\024\132\027\115\030\122" +
    "\035\133\036\120\037\116\040\134\041\135\044\121\054" +
    "\124\001\002\000\020\010\uffb7\011\057\025\047\031\052" +
    "\053\uffb7\061\044\062\060\001\002\000\024\010\uffa8\011" +
    "\uffa8\022\uffa8\023\uffa8\025\uffa8\031\uffa8\053\uffa8\061\uffa8" +
    "\062\uffa8\001\002\000\016\034\101\042\106\062\105\063" +
    "\035\064\036\065\034\001\002\000\036\004\131\005\117" +
    "\016\130\024\132\027\115\030\122\035\133\036\120\037" +
    "\116\040\134\041\135\044\121\053\uffda\054\124\001\002" +
    "\000\036\004\131\005\117\016\130\017\204\024\132\027" +
    "\115\030\122\035\133\036\120\037\116\040\134\041\135" +
    "\044\121\054\124\001\002\000\020\010\uffb7\011\057\025" +
    "\047\031\052\053\uffb7\061\044\062\060\001\002\000\024" +
    "\010\uffa9\011\uffa9\022\uffa9\023\uffa9\025\uffa9\031\uffa9\053" +
    "\uffa9\061\uffa9\062\uffa9\001\002\000\006\013\uffe7\034\207" +
    "\001\002\000\004\062\224\001\002\000\004\013\211\001" +
    "\002\000\012\012\215\032\212\047\214\062\216\001\002" +
    "\000\010\023\uffe4\052\uffe4\053\uffe4\001\002\000\004\053" +
    "\220\001\002\000\010\023\uffe3\052\uffe3\053\uffe3\001\002" +
    "\000\010\023\uffe2\052\uffe2\053\uffe2\001\002\000\010\023" +
    "\uffad\052\uffad\053\uffad\001\002\000\010\023\uffae\052\uffae" +
    "\053\uffae\001\002\000\016\010\ufffd\015\ufffd\026\ufffd\045" +
    "\ufffd\057\ufffd\060\ufffd\001\002\000\004\053\222\001\002" +
    "\000\016\010\uffe9\015\uffe9\026\uffe9\045\uffe9\057\uffe9\060" +
    "\uffe9\001\002\000\004\052\234\001\002\000\006\013\uffec" +
    "\014\232\001\002\000\004\013\226\001\002\000\012\012" +
    "\215\032\212\047\214\062\216\001\002\000\006\052\uffe6" +
    "\053\230\001\002\000\004\062\224\001\002\000\004\052" +
    "\uffe5\001\002\000\004\062\224\001\002\000\004\013\uffeb" +
    "\001\002\000\006\013\uffe8\053\uffe8\001\002\000\004\024" +
    "\237\001\002\000\020\010\uffb3\015\uffb3\026\uffb3\045\uffb3" +
    "\053\uffb3\057\uffb3\060\uffb3\001\002\000\006\006\242\050" +
    "\240\001\002\000\004\062\224\001\002\000\004\053\252" +
    "\001\002\000\004\033\243\001\002\000\010\063\035\064" +
    "\036\065\034\001\002\000\004\021\245\001\002\000\010" +
    "\063\035\064\036\065\034\001\002\000\004\051\247\001" +
    "\002\000\004\043\250\001\002\000\012\012\215\032\212" +
    "\047\214\062\216\001\002\000\004\053\uffb0\001\002\000" +
    "\022\010\uffb2\015\uffb2\026\uffb2\045\uffb2\053\uffb2\057\uffb2" +
    "\060\uffb2\062\235\001\002\000\020\010\uffb1\015\uffb1\026" +
    "\uffb1\045\uffb1\053\uffb1\057\uffb1\060\uffb1\001\002\000\006" +
    "\023\261\053\260\001\002\000\004\013\256\001\002\000" +
    "\012\012\215\032\212\047\214\062\216\001\002\000\006" +
    "\023\uffee\053\uffee\001\002\000\004\062\224\001\002\000" +
    "\004\053\uffaf\001\002\000\004\013\263\001\002\000\012" +
    "\012\215\032\212\047\214\062\216\001\002\000\006\023" +
    "\uffed\053\uffed\001\002\000\004\053\266\001\002\000\022" +
    "\010\uffef\015\uffef\026\uffef\045\uffef\053\uffef\057\uffef\060" +
    "\uffef\062\224\001\002\000\006\034\207\053\uffe7\001\002" +
    "\000\004\053\271\001\002\000\016\010\ufffd\015\ufffd\026" +
    "\ufffd\045\ufffd\057\ufffd\060\ufffd\001\002\000\004\053\273" +
    "\001\002\000\016\010\uffea\015\uffea\026\uffea\045\uffea\057" +
    "\uffea\060\uffea\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\004\040\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\010\013\007" +
    "\001\001\000\016\011\016\015\012\016\024\017\022\020" +
    "\023\021\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\264\051\254\001\001\000\002\001\001\000\004" +
    "\047\235\001\001\000\002\001\001\000\030\003\054\005" +
    "\060\010\055\014\061\024\042\030\052\033\044\041\050" +
    "\042\053\043\047\052\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\025\202\027\103\044\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\054\005\060\010\055\014\061\024\042\030" +
    "\052\033\044\041\050\042\071\052\045\001\001\000\002" +
    "\001\001\000\010\025\161\027\103\044\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\025\147\027\103\044\101\001\001\000" +
    "\004\045\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\054\005\060\010\055\014\061\024\042\030" +
    "\052\033\044\041\050\042\053\043\070\052\045\001\001" +
    "\000\012\012\065\015\064\020\067\021\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\054\005\060\010\055\014\061\024" +
    "\042\030\052\033\044\041\050\042\071\052\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\025\142\026" +
    "\143\027\103\044\101\001\001\000\010\025\102\027\103" +
    "\044\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\025\140\027\103\044\101\001\001" +
    "\000\002\001\001\000\012\034\122\035\124\036\126\037" +
    "\125\001\001\000\002\001\001\000\004\045\107\001\001" +
    "\000\006\027\106\044\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\025\113\027\103\044\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\034\122\035" +
    "\124\036\126\037\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\136\027\103\044\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\034\122\035\124" +
    "\036\126\037\125\001\001\000\002\001\001\000\012\034" +
    "\122\035\124\036\126\037\125\001\001\000\002\001\001" +
    "\000\012\034\122\035\124\036\126\037\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\025\142\026\146" +
    "\027\103\044\101\001\001\000\002\001\001\000\012\034" +
    "\122\035\124\036\126\037\125\001\001\000\012\006\151" +
    "\025\152\027\103\044\101\001\001\000\002\001\001\000" +
    "\012\034\122\035\124\036\126\037\125\001\001\000\026" +
    "\003\054\005\060\010\055\014\061\024\042\030\052\033" +
    "\044\041\050\042\154\052\045\001\001\000\002\001\001" +
    "\000\012\006\156\025\152\027\103\044\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\034\122\035\124\036\126\037\125\001\001\000\026\003" +
    "\054\005\060\010\055\014\061\024\042\030\052\033\044" +
    "\041\050\042\163\052\045\001\001\000\004\023\165\001" +
    "\001\000\026\003\054\005\060\010\055\014\061\024\042" +
    "\030\052\033\044\041\050\042\166\052\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\173\027\103\044" +
    "\101\001\001\000\012\034\122\035\124\036\126\037\125" +
    "\001\001\000\010\025\175\027\103\044\101\001\001\000" +
    "\012\034\122\035\124\036\126\037\125\001\001\000\026" +
    "\003\054\005\060\010\055\014\061\024\042\030\052\033" +
    "\044\041\050\042\177\052\045\001\001\000\002\001\001" +
    "\000\010\025\201\027\103\044\101\001\001\000\012\034" +
    "\122\035\124\036\126\037\125\001\001\000\012\034\122" +
    "\035\124\036\126\037\125\001\001\000\026\003\054\005" +
    "\060\010\055\014\061\024\042\030\052\033\044\041\050" +
    "\042\204\052\045\001\001\000\002\001\001\000\004\032" +
    "\207\001\001\000\006\031\222\051\224\001\001\000\002" +
    "\001\001\000\006\002\212\046\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\220\013" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\226\046\216\001\001\000\002\001\001\000\006\031\230" +
    "\051\224\001\001\000\002\001\001\000\004\051\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\240\001\001\000\006\022" +
    "\253\051\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\243\001\001\000\002\001\001\000\004\044" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\250\046\216\001\001\000\002\001\001\000\004\047" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\256\046\216\001\001\000\002\001" +
    "\001\000\004\051\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\263\046\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\261\001\001\000\004" +
    "\032\267\001\001\000\002\001\001\000\006\004\271\013" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error (Symbol s) {
        StringBuilder sb = new StringBuilder();
        sb.append("Syntax Error\n");
        sb.append("left: "+s.left+"\n");
        sb.append("right: "+s.right+"\n");
        sb.append("value: "+s.value+"\n");
        report_error(sb.toString(), null);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


    public void print (Object o) {
        System.out.println(o);
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // caselist ::= exp COLONS sent SEMI_COLONS caselist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caselist",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // caselist ::= exp COLONS sent SEMI_COLONS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caselist",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // case ::= CASE exp OF caselist END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // floop ::= FOR IDENTIFIER ASSIGN exp TO exp DO sent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("floop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // wloop ::= WHILE exp DO sent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("wloop",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // elsecond ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsecond",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // elsecond ::= ELSE sent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsecond",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cond ::= IF exp THEN sent elsecond 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // alltypes ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alltypes",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // alltypes ::= tbas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alltypes",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // udtype ::= RECORD defvarlist END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("udtype",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // udtype ::= ARRAY LEFT_BRACKET simpvalue DOUBLE_DOT simpvalue RIGHT_BRACKET OF alltypes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("udtype",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // typelist ::= IDENTIFIER EQ udtype SEMI_COLONS typelist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typelist",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // typelist ::= IDENTIFIER EQ udtype SEMI_COLONS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typelist",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // deftype ::= TYPE typelist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deftype",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // dcl_blq ::= defvar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dcl_blq",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // dcl_blq ::= deftype 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dcl_blq",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // dcl_blq ::= defcte 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dcl_blq",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // dcllist_blq ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dcllist_blq",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // dcllist_blq ::= dcllist_blq SEMI_COLONS dcl_blq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dcllist_blq",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exeblq ::= dcllist_blq BEGIN sentlist END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exeblq",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // prog_call ::= IDENTIFIER subpparamlist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog_call",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // explist ::= exp COMMA explist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("explist",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // explist ::= exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("explist",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // subpparamlist ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subpparamlist",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // subpparamlist ::= LEFT_PARENTHESIS explist RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subpparamlist",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= IDENTIFIER DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= IDENTIFIER LEFT_BRACKET exp RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= IDENTIFIER subpparamlist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= LEFT_PARENTHESIS exp RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= NOT factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= simpvalue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // oplog ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oplog",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // oplog ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oplog",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // oparit ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oparit",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // oparit ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oparit",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // oparit ::= MUL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oparit",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // oparit ::= SUB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oparit",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // oparit ::= ADD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oparit",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // opcomp ::= NEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opcomp",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // opcomp ::= EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opcomp",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // opcomp ::= GEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opcomp",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // opcomp ::= LEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opcomp",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // opcomp ::= GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opcomp",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // opcomp ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opcomp",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // op ::= oparit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // op ::= oplog 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // op ::= opcomp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp op exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // id ::= IDENTIFIER DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // id ::= IDENTIFIER LEFT_BRACKET exp RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // id ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asig ::= id ASSIGN exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asig",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sent ::= case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sent ::= floop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sent ::= wloop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sent ::= cond 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sent ::= exeblq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sent ::= prog_call SEMI_COLONS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sent ::= asig SEMI_COLONS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tbas ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tbas",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tbas ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tbas",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tbas ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tbas",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // formal_param ::= varlist COLONS alltypes SEMI_COLONS formal_param 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_param",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // formal_param ::= varlist COLONS alltypes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_param",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // formal_paramlist ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_paramlist",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // formal_paramlist ::= LEFT_PARENTHESIS formal_param RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_paramlist",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // deffun ::= FUNCTION IDENTIFIER formal_paramlist COLONS alltypes SEMI_COLONS blq SEMI_COLONS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deffun",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // defproc ::= PROCEDURE IDENTIFIER formal_paramlist SEMI_COLONS blq SEMI_COLONS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defproc",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // varlist ::= IDENTIFIER COMMA varlist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlist",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // varlist ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlist",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // defvarlist ::= defvarlist SEMI_COLONS varlist COLONS alltypes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defvarlist",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // defvarlist ::= varlist COLONS alltypes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defvarlist",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // defvar ::= VAR defvarlist SEMI_COLONS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defvar",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // simpvalue ::= STRING_CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpvalue",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // simpvalue ::= NUMERIC_REAL_CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpvalue",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // simpvalue ::= NUMERIC_INTEGER_CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpvalue",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ctelist ::= ctelist IDENTIFIER EQ simpvalue SEMI_COLONS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ctelist",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ctelist ::= IDENTIFIER EQ simpvalue SEMI_COLONS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ctelist",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // defcte ::= CONST ctelist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defcte",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dcl ::= deftype 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dcl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dcl ::= deffun 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dcl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dcl ::= defproc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dcl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dcl ::= defvar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dcl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dcl ::= defcte 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dcl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentlist ::= sentlist sent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentlist",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentlist ::= sent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentlist",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dcllist ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dcllist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dcllist ::= dcllist dcl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dcllist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // blq ::= dcllist BEGIN sentlist END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blq",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prg ::= PROGRAM IDENTIFIER SEMI_COLONS blq DOT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new Program(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prg",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prg EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

