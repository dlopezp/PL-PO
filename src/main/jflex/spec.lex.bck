import java_cup.runtime.*;

%%

%class Lexer
%unicode
%cup
%line
%column

%{
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }

  private void error (int errorCode) {
    System.out.println("ERROR " + errorCode);
    System.exit(0);
  }
%}

%eof{
%eof}

LineTerminator = \r|\n|\r\n
InputCharacter = [^\r\n]
BlankSpace = [ \t\f]
WhiteSpace = {LineTerminator} | {BlankSpace}

LetterLower = [a-z]
LetterUpper = [A-Z]
Letter = {LetterLower} | {LetterUpper}

NumberNatural = [1-9]
Number = 0 | {NumberNatural}*

/* comments */
CommentDelimiterBegin1 = "{"
CommentDelimiterEnd1 = "}"
InvalidComment1 = {CommentDelimiterBegin1} ([^}])+
Comment1 = {InvalidComment1}{CommentDelimiterEnd1}

CommentDelimiterBegin2 = "(*"
CommentDelimiterEnd2 = "*)"
InvalidComment2 = {CommentDelimiterBegin2} ([^(*\))])+
Comment2 = {InvalidComment2}{CommentDelimiterEnd2}

Comment = {Comment1} | {Comment2}
InvalidComment = {InvalidComment1} | {InvalidComment2}

/* identifiers */
IdentifierFirstChar = {Letter} | "_"
IdentifierValidChar = {IdentifierFirstChar} | {Number}
Identifier = {IdentifierFirstChar} {IdentifierValidChar}*

/* integer literals */
IntegerNumber = 0 | {NumberNatural} {Number}*
IntegerDecimalConstant = [+-]? {IntegerNumber}

HexDigit = [0-9a-fA-F]
HexInteger = "$" {HexDigit}+
HexDecimelConstant = [+-]? {HexInteger}

DecimalConstant = {IntegerDecimalConstant} | {HexDecimelConstant}

/* floating point literals */
IntegerFloatConstant = {IntegerDecimalConstant} "." {Number}+
HexFloatConstant = {HexDecimelConstant} "." {HexDigit}
FloatConstant = {IntegerFloatConstant} | {HexFloatConstant}

NumericConstant = {DecimalConstant} | {FloatConstant}

/* string and character literals */
StringDelimiter = "'"
StringDelimiterInside = "''"
StringValidContent = [^'\n] | {StringDelimiterInside}

InvalidString = {StringDelimiter} ({StringValidContent})*
String = {InvalidString} {StringDelimiter}

%%

<YYINITIAL> {

  {InvalidComment} {
    error(0);
  }

  {InvalidString} {
    error(1);
  }

  "array"     { return symbol(sym.ARRAY); }
  "begin"     { return symbol(sym.BEGIN); }
  "case"      { return symbol(sym.CASE); }
  "const"     { return symbol(sym.CONST); }
  "do"        { return symbol(sym.DO); }
  "else"      { return symbol(sym.ELSE); }
  "end"       { return symbol(sym.END); }
  "for"       { return symbol(sym.FOR); }
  "function"  { return symbol(sym.FUNCTION); }
  "if"        { return symbol(sym.IF); }
  "of"        { return symbol(sym.OF); }
  "procedure" { return symbol(sym.PROCEDURE); }
  "program"   { return symbol(sym.PROGRAM); }
  "record"    { return symbol(sym.RECORD); }
  "then"      { return symbol(sym.THEN); }
  "to"        { return symbol(sym.TO); }
  "type"      { return symbol(sym.TYPE); }
  "var"       { return symbol(sym.VAR); }
  "while"     { return symbol(sym.WHILE); }

  "INTEGER"   { return symbol(sym.INTEGER); }
  "REAL"      { return symbol(sym.REAL); }
  "CHARACTER" { return symbol(sym.CHARACTER); }

  ";"         { return symbol(sym.SEMI_COLONS); }
  ":"         { return symbol(sym.COLONS); }
  ".."        { return symbol(sym.DOUBLE_DOT); }
  "."         { return symbol(sym.DOT); }
  ","         { return symbol(sym.COMMA); }
  "("         { return symbol(sym.LEFT_PARENTHESIS); }
  ")"         { return symbol(sym.RIGHT_PARENTHESIS); }
  "["         { return symbol(sym.LEFT_BRACKET); }
  "]"         { return symbol(sym.RIGHT_BRACKET); }

  ":="        { return symbol(sym.ASSIGN); }

  "="         { return symbol(sym.EQ); }
  "<>"        { return symbol(sym.NEQ); }
  ">"         { return symbol(sym.GT); }
  ">="        { return symbol(sym.GEQ); }
  "<"         { return symbol(sym.LT); }
  "<="        { return symbol(sym.LEQ); }

  "+"         { return symbol(sym.ADD); }
  "-"         { return symbol(sym.SUB); }
  "*"         { return symbol(sym.MUL); }
  "div"       { return symbol(sym.DIV); }
  "mod"       { return symbol(sym.MOD); }

  "and"       { return symbol(sym.AND); }
  "not"       { return symbol(sym.NOT); }
  "or"        { return symbol(sym.OR); }

}